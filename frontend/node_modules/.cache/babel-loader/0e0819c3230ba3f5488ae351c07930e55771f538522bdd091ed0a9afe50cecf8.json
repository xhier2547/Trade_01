{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\wator\\\\Documents\\\\Ananto\\\\trade\\\\frontend\\\\src\\\\components\\\\TradingChart.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { Chart as ChartJS, CategoryScale, LinearScale, TimeScale, Title, Tooltip, Legend } from \"chart.js\";\nimport \"chartjs-adapter-date-fns\";\nimport { Chart } from \"react-chartjs-2\";\nimport { CandlestickController, CandlestickElement } from \"chartjs-chart-financial\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, TimeScale, CandlestickController, CandlestickElement, Title, Tooltip, Legend);\nconst TradingChart = () => {\n  _s();\n  const [candles, setCandles] = useState([]);\n  const [signals, setSignals] = useState([]); // ⭐ เพิ่มสัญญาณ BUY/SELL\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const res = await fetch(\"https://api.binance.com/api/v3/klines?symbol=GBPUSDT&interval=1m&limit=10\");\n        const data = await res.json();\n        const candlesData = data.map(entry => ({\n          x: new Date(entry[0]),\n          o: parseFloat(entry[1]),\n          h: parseFloat(entry[2]),\n          l: parseFloat(entry[3]),\n          c: parseFloat(entry[4])\n        }));\n        setCandles(candlesData);\n\n        // ดึงข้อมูลสัญญาณซื้อ/ขายจาก AI\n        const signalRes = await fetch(\"http://127.0.0.1:8000/signal/GBPUSD\");\n        const signalData = await signalRes.json();\n        setSignals(signalData.signals);\n      } catch (error) {\n        console.error(\"Error fetching data:\", error);\n      }\n    };\n    fetchData();\n    const interval = setInterval(fetchData, 60000);\n    return () => clearInterval(interval);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"GBP/USD Trading Chart\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Chart, {\n      type: \"candlestick\",\n      data: {\n        datasets: [{\n          label: \"GBP/USD Price\",\n          data: candles,\n          borderColor: \"blue\",\n          borderWidth: 2\n        }, {\n          label: \"Trading Signals\",\n          data: signals.map((s, i) => {\n            var _candles$i, _candles$i2, _candles$i3;\n            return {\n              x: (_candles$i = candles[i]) === null || _candles$i === void 0 ? void 0 : _candles$i.x,\n              y: s.type === \"BUY\" ? ((_candles$i2 = candles[i]) === null || _candles$i2 === void 0 ? void 0 : _candles$i2.l) - 0.0005 : ((_candles$i3 = candles[i]) === null || _candles$i3 === void 0 ? void 0 : _candles$i3.h) + 0.0005\n            };\n          }),\n          pointStyle: \"triangle\",\n          pointRadius: 10,\n          backgroundColor: signals.map(s => s.type === \"BUY\" ? \"green\" : \"red\")\n        }]\n      },\n      options: {\n        scales: {\n          x: {\n            type: \"time\",\n            time: {\n              unit: \"minute\"\n            }\n          }\n        }\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n};\n_s(TradingChart, \"OvfjtsgH82QBILNDiDIOBwEHZ/g=\");\n_c = TradingChart;\nexport default TradingChart;\nvar _c;\n$RefreshReg$(_c, \"TradingChart\");","map":{"version":3,"names":["React","useState","useEffect","Chart","ChartJS","CategoryScale","LinearScale","TimeScale","Title","Tooltip","Legend","CandlestickController","CandlestickElement","jsxDEV","_jsxDEV","register","TradingChart","_s","candles","setCandles","signals","setSignals","fetchData","res","fetch","data","json","candlesData","map","entry","x","Date","o","parseFloat","h","l","c","signalRes","signalData","error","console","interval","setInterval","clearInterval","children","fileName","_jsxFileName","lineNumber","columnNumber","type","datasets","label","borderColor","borderWidth","s","i","_candles$i","_candles$i2","_candles$i3","y","pointStyle","pointRadius","backgroundColor","options","scales","time","unit","_c","$RefreshReg$"],"sources":["C:/Users/wator/Documents/Ananto/trade/frontend/src/components/TradingChart.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Chart as ChartJS,\r\n  CategoryScale,\r\n  LinearScale,\r\n  TimeScale,\r\n  Title,\r\n  Tooltip,\r\n  Legend\r\n} from \"chart.js\";\r\nimport \"chartjs-adapter-date-fns\";\r\nimport { Chart } from \"react-chartjs-2\";\r\nimport { CandlestickController, CandlestickElement } from \"chartjs-chart-financial\";\r\n\r\nChartJS.register(CategoryScale, LinearScale, TimeScale, CandlestickController, CandlestickElement, Title, Tooltip, Legend);\r\n\r\nconst TradingChart = () => {\r\n  const [candles, setCandles] = useState([]);\r\n  const [signals, setSignals] = useState([]); // ⭐ เพิ่มสัญญาณ BUY/SELL\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const res = await fetch(\"https://api.binance.com/api/v3/klines?symbol=GBPUSDT&interval=1m&limit=10\");\r\n        const data = await res.json();\r\n\r\n        const candlesData = data.map(entry => ({\r\n          x: new Date(entry[0]),\r\n          o: parseFloat(entry[1]), \r\n          h: parseFloat(entry[2]), \r\n          l: parseFloat(entry[3]), \r\n          c: parseFloat(entry[4]), \r\n        }));\r\n\r\n        setCandles(candlesData);\r\n\r\n        // ดึงข้อมูลสัญญาณซื้อ/ขายจาก AI\r\n        const signalRes = await fetch(\"http://127.0.0.1:8000/signal/GBPUSD\");\r\n        const signalData = await signalRes.json();\r\n        setSignals(signalData.signals); \r\n\r\n      } catch (error) {\r\n        console.error(\"Error fetching data:\", error);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n    const interval = setInterval(fetchData, 60000);\r\n    return () => clearInterval(interval);\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <h2>GBP/USD Trading Chart</h2>\r\n      <Chart\r\n        type=\"candlestick\"\r\n        data={{\r\n          datasets: [\r\n            {\r\n              label: \"GBP/USD Price\",\r\n              data: candles,\r\n              borderColor: \"blue\",\r\n              borderWidth: 2,\r\n            },\r\n            {\r\n              label: \"Trading Signals\",\r\n              data: signals.map((s, i) => ({\r\n                x: candles[i]?.x, \r\n                y: s.type === \"BUY\" ? candles[i]?.l - 0.0005 : candles[i]?.h + 0.0005, \r\n              })),\r\n              pointStyle: \"triangle\",\r\n              pointRadius: 10,\r\n              backgroundColor: signals.map(s => (s.type === \"BUY\" ? \"green\" : \"red\")),\r\n            }\r\n          ],\r\n        }}\r\n        options={{\r\n          scales: {\r\n            x: {\r\n              type: \"time\",\r\n              time: {\r\n                unit: \"minute\",\r\n              },\r\n            },\r\n          },\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TradingChart;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SACEC,KAAK,IAAIC,OAAO,EAChBC,aAAa,EACbC,WAAW,EACXC,SAAS,EACTC,KAAK,EACLC,OAAO,EACPC,MAAM,QACD,UAAU;AACjB,OAAO,0BAA0B;AACjC,SAASP,KAAK,QAAQ,iBAAiB;AACvC,SAASQ,qBAAqB,EAAEC,kBAAkB,QAAQ,yBAAyB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpFV,OAAO,CAACW,QAAQ,CAACV,aAAa,EAAEC,WAAW,EAAEC,SAAS,EAAEI,qBAAqB,EAAEC,kBAAkB,EAAEJ,KAAK,EAAEC,OAAO,EAAEC,MAAM,CAAC;AAE1H,MAAMM,YAAY,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACzB,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGlB,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACmB,OAAO,EAAEC,UAAU,CAAC,GAAGpB,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;;EAE5CC,SAAS,CAAC,MAAM;IACd,MAAMoB,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,IAAI;QACF,MAAMC,GAAG,GAAG,MAAMC,KAAK,CAAC,2EAA2E,CAAC;QACpG,MAAMC,IAAI,GAAG,MAAMF,GAAG,CAACG,IAAI,CAAC,CAAC;QAE7B,MAAMC,WAAW,GAAGF,IAAI,CAACG,GAAG,CAACC,KAAK,KAAK;UACrCC,CAAC,EAAE,IAAIC,IAAI,CAACF,KAAK,CAAC,CAAC,CAAC,CAAC;UACrBG,CAAC,EAAEC,UAAU,CAACJ,KAAK,CAAC,CAAC,CAAC,CAAC;UACvBK,CAAC,EAAED,UAAU,CAACJ,KAAK,CAAC,CAAC,CAAC,CAAC;UACvBM,CAAC,EAAEF,UAAU,CAACJ,KAAK,CAAC,CAAC,CAAC,CAAC;UACvBO,CAAC,EAAEH,UAAU,CAACJ,KAAK,CAAC,CAAC,CAAC;QACxB,CAAC,CAAC,CAAC;QAEHV,UAAU,CAACQ,WAAW,CAAC;;QAEvB;QACA,MAAMU,SAAS,GAAG,MAAMb,KAAK,CAAC,qCAAqC,CAAC;QACpE,MAAMc,UAAU,GAAG,MAAMD,SAAS,CAACX,IAAI,CAAC,CAAC;QACzCL,UAAU,CAACiB,UAAU,CAAClB,OAAO,CAAC;MAEhC,CAAC,CAAC,OAAOmB,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC9C;IACF,CAAC;IAEDjB,SAAS,CAAC,CAAC;IACX,MAAMmB,QAAQ,GAAGC,WAAW,CAACpB,SAAS,EAAE,KAAK,CAAC;IAC9C,OAAO,MAAMqB,aAAa,CAACF,QAAQ,CAAC;EACtC,CAAC,EAAE,EAAE,CAAC;EAEN,oBACE3B,OAAA;IAAA8B,QAAA,gBACE9B,OAAA;MAAA8B,QAAA,EAAI;IAAqB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC9BlC,OAAA,CAACX,KAAK;MACJ8C,IAAI,EAAC,aAAa;MAClBxB,IAAI,EAAE;QACJyB,QAAQ,EAAE,CACR;UACEC,KAAK,EAAE,eAAe;UACtB1B,IAAI,EAAEP,OAAO;UACbkC,WAAW,EAAE,MAAM;UACnBC,WAAW,EAAE;QACf,CAAC,EACD;UACEF,KAAK,EAAE,iBAAiB;UACxB1B,IAAI,EAAEL,OAAO,CAACQ,GAAG,CAAC,CAAC0B,CAAC,EAAEC,CAAC;YAAA,IAAAC,UAAA,EAAAC,WAAA,EAAAC,WAAA;YAAA,OAAM;cAC3B5B,CAAC,GAAA0B,UAAA,GAAEtC,OAAO,CAACqC,CAAC,CAAC,cAAAC,UAAA,uBAAVA,UAAA,CAAY1B,CAAC;cAChB6B,CAAC,EAAEL,CAAC,CAACL,IAAI,KAAK,KAAK,GAAG,EAAAQ,WAAA,GAAAvC,OAAO,CAACqC,CAAC,CAAC,cAAAE,WAAA,uBAAVA,WAAA,CAAYtB,CAAC,IAAG,MAAM,GAAG,EAAAuB,WAAA,GAAAxC,OAAO,CAACqC,CAAC,CAAC,cAAAG,WAAA,uBAAVA,WAAA,CAAYxB,CAAC,IAAG;YACjE,CAAC;UAAA,CAAC,CAAC;UACH0B,UAAU,EAAE,UAAU;UACtBC,WAAW,EAAE,EAAE;UACfC,eAAe,EAAE1C,OAAO,CAACQ,GAAG,CAAC0B,CAAC,IAAKA,CAAC,CAACL,IAAI,KAAK,KAAK,GAAG,OAAO,GAAG,KAAM;QACxE,CAAC;MAEL,CAAE;MACFc,OAAO,EAAE;QACPC,MAAM,EAAE;UACNlC,CAAC,EAAE;YACDmB,IAAI,EAAE,MAAM;YACZgB,IAAI,EAAE;cACJC,IAAI,EAAE;YACR;UACF;QACF;MACF;IAAE;MAAArB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAAC/B,EAAA,CAzEID,YAAY;AAAAmD,EAAA,GAAZnD,YAAY;AA2ElB,eAAeA,YAAY;AAAC,IAAAmD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}